## filtro de barrios
prob_bar <- table(comuna_filter$BARRIO)/length(comuna_filter$BARRIO) ## probabilidad accidentalidad barrio
barrio0 <- sample(sort(unique(comuna_filter$BARRIO)),
length(dates_range), replace = TRUE,
prob = prob_bar)
## filtro para clase
prob_clas <- table(comuna_filter$CLASE)/length(comuna_filter$CLASE)  ## probabilidad de cada clase
prob_clas <- prob_clas[which(prob_clas>0)]
clases_acc <- sample(sort(unique(comuna_filter$CLASE)), length(dates_range),
replace=TRUE, prob = prob_clas) ## se asignan las clases con su probabilidad
for (j in 1:length(dates_range)) {
data_for_prediction[j+h, "FECHA"] <- dates_range[j]
data_for_prediction[j+h,"COMUNA"] <- comuna_filter$COMUNA[1]
data_for_prediction[j+h,"BARRIO"] <- barrio0[j]
data_for_prediction[j+h,"CLASE"] <- clases_acc[j]
ah = ah+1
}
h = h+ah
ah=0
}
## BALANCEO DE LOS DATOS
### se debe hacer para que la dimensión de los conjuntos simulados para
### dias, mes, y año sea lo más cercana a la de los datos reales de accidentalidad
### por año, y la predicción no de valores muy desfasados.
n <- dim(data_for_prediction)[1]
if (resolucion_temp=="dia") {
frac <- sample(1:n, 0.33*n, replace=TRUE)
data_for_prediction <- data_for_prediction[frac,]
} else {
if (resolucion_temp=="semana") {
frac <- sample(1:n, 0.28*n, replace=TRUE)
data_for_prediction1 <- data_for_prediction
data_for_prediction2 <- data_for_prediction[frac,]
data_for_prediction <- rbind(data_for_prediction1, data_for_prediction2)
} else {
frac <- sample(1:n, 1000, replace=TRUE)
frac1 <- sample(1:n, 5500, replace=TRUE)
data_for_prediction1 <- data_for_prediction
data_for_prediction2 <- data_for_prediction[frac,]
data_for_prediction3 <- subset(data_for_prediction, CLASE %in% c(1,2,4,5))
data_for_prediction3 <- data_for_prediction3[frac1, ]
'data_for_prediction <- rbind(data_for_prediction1,
data_for_prediction2,
data_for_prediction3)'
}
}
## se ordena por fecha
data_for_prediction <- subset(data_for_prediction, CLASE %in% c(1,2,3,4,5))
data_for_prediction <- data_for_prediction[order(data_for_prediction$FECHA),]
############## PARTE 2 ####################################
## Se adecuan los datos
## nombre del día
data_for_prediction$DIA_NOMBRE <- weekdays(data_for_prediction$FECHA)
data_for_prediction$DIA_NOMBRE <- toupper(stri_trans_general(data_for_prediction$DIA_NOMBRE,"Latin-ASCII"))
## fechas especiales
data_for_prediction$FECHAS_ESP1 <- ifelse(data_for_prediction$DIA_NOMBRE %in% c("SABADO","DOMINGO"), "NO LABORAL", "LABORAL")
data_for_prediction$FECHAS_ESP <- ifelse(data_for_prediction$FECHA %in% festivos$FECHA, "FESTIVO", data_for_prediction$FECHAS_ESP1)
## dia, semana, mes, periodo
data_for_prediction$DIA_ANNO <- yday(data_for_prediction$FECHA)
data_for_prediction$SEMANA <- week(data_for_prediction$FECHA)
data_for_prediction$MES <- month(data_for_prediction$FECHA)
data_for_prediction$PERIODO <- year(data_for_prediction$FECHA)
## variables a factores
data_for_prediction$MES <- as.factor(data_for_prediction$MES)
## niveles
levels(data_for_prediction$FECHAS_ESP) <- levels(accidentalidad$FECHAS_ESP)
levels(data_for_prediction$CLASE) <- levels(accidentalidad$CLASE)
levels(data_for_prediction$COMUNA) <- levels(accidentalidad$COMUNA)
levels(data_for_prediction$MES) <- levels(accidentalidad$MES)
## SEMANA a numéricas
data_for_prediction$SEMANA <- as.numeric(data_for_prediction$SEMANA)
## nombre de las clases
data_for_prediction$CLASE_TEXT <- ifelse(data_for_prediction$CLASE==1, "ATROPELLO",
ifelse(data_for_prediction$CLASE==2, "CAIDA OCUPANTE",
ifelse(data_for_prediction$CLASE==3, "CHOQUE",
ifelse(data_for_prediction$CLASE==4, "OTRO",
"VOLCAMIENTO"))))
## data final
data_for_prediction <- select(data_for_prediction, FECHA, PERIODO, MES, FECHAS_ESP, CLASE_TEXT,
SEMANA, DIA_ANNO, COMUNA, BARRIO, CLASE)
data_for_prediction
}
data_in <- acc_function("2018/1/1", "2018/12/31", "mes")
## prediction 1
predicciones <- pred_function(data_in, "mes")
predicciones
dim(data_in)
dim(testSet_mes)
8696/3180
5500/3180
1000/3180
### Función para predecir accidentalidad para un intervalo de tiempo
### La función toma el intervalo introducido y crea un data frame con las columnas
### FECHA, MES, SEMANA, DIA, COMUNA, BARRIO, CLASE y FECHAS_ESP
### Necesarias para predecir la accidentalidad por mes, semana o día
### se debe introducir ventana de tiempo en formato año/mes/dia
### resolución temporal: mes, semana, dia
acc_function <- function(Fecha_inicial, Fecha_final, resolucion_temp) {
### Librerías necesarias
library(stringi)
library(lubridate)
library(dplyr)
library(plyr)
#set.seed(12345)
### función que recibe fecha como entrada y la generaliza
resolucion_temp <- tolower(resolucion_temp)
freq_date = ifelse(resolucion_temp=="mes", "month",
ifelse(resolucion_temp=="semana", "week", "day"))
M <- seq(as.Date(Fecha_inicial), as.Date(Fecha_final), by=freq_date)
## copiamos data requerida de dataframe df
df2 <- select(accidentalidad, COMUNA, BARRIO, CLASE)
## se distribuyen las comunas y barrios para cada día del rango
## Para esto toca hacer un proceso iterativo ya que los barrios
## también son diferentes para cada comuna
## de igual forma se distribuyen las clases de accidente de acuerdo a la
## proporción de accidentes de cada comuna
data_for_prediction <- data.frame()
h = 0  ## contador
ah=0   ## contador
for (i in 1:(length(unique(df2$COMUNA)))) {
## filtro comuna i
comuna_filter <- subset(df2, COMUNA==unique(df2$COMUNA)[i])
## rango de fechas
dates_range <- sort(rep(M, length(unique(comuna_filter$BARRIO))))
## filtro de barrios
prob_bar <- table(comuna_filter$BARRIO)/length(comuna_filter$BARRIO) ## probabilidad accidentalidad barrio
barrio0 <- sample(sort(unique(comuna_filter$BARRIO)),
length(dates_range), replace = TRUE,
prob = prob_bar)
## filtro para clase
prob_clas <- table(comuna_filter$CLASE)/length(comuna_filter$CLASE)  ## probabilidad de cada clase
prob_clas <- prob_clas[which(prob_clas>0)]
clases_acc <- sample(sort(unique(comuna_filter$CLASE)), length(dates_range),
replace=TRUE, prob = prob_clas) ## se asignan las clases con su probabilidad
for (j in 1:length(dates_range)) {
data_for_prediction[j+h, "FECHA"] <- dates_range[j]
data_for_prediction[j+h,"COMUNA"] <- comuna_filter$COMUNA[1]
data_for_prediction[j+h,"BARRIO"] <- barrio0[j]
data_for_prediction[j+h,"CLASE"] <- clases_acc[j]
ah = ah+1
}
h = h+ah
ah=0
}
## BALANCEO DE LOS DATOS
### se debe hacer para que la dimensión de los conjuntos simulados para
### dias, mes, y año sea lo más cercana a la de los datos reales de accidentalidad
### por año, y la predicción no de valores muy desfasados.
n <- dim(data_for_prediction)[1]
if (resolucion_temp=="dia") {
frac <- sample(1:n, 0.33*n, replace=TRUE)
data_for_prediction <- data_for_prediction[frac,]
} else {
if (resolucion_temp=="semana") {
frac <- sample(1:n, 0.28*n, replace=TRUE)
data_for_prediction1 <- data_for_prediction
data_for_prediction2 <- data_for_prediction[frac,]
data_for_prediction <- rbind(data_for_prediction1, data_for_prediction2)
} else {
frac <- sample(1:n, 0.32*n, replace=TRUE)
frac1 <- sample(1:n, 1.73*n, replace=TRUE)
data_for_prediction1 <- data_for_prediction
data_for_prediction2 <- data_for_prediction[frac,]
data_for_prediction3 <- subset(data_for_prediction, CLASE %in% c(1,2,4,5))
data_for_prediction3 <- data_for_prediction3[frac1, ]
data_for_prediction <- rbind(data_for_prediction1,
data_for_prediction2,
data_for_prediction3)
}
}
## se ordena por fecha
data_for_prediction <- subset(data_for_prediction, CLASE %in% c(1,2,3,4,5))
data_for_prediction <- data_for_prediction[order(data_for_prediction$FECHA),]
############## PARTE 2 ####################################
## Se adecuan los datos
## nombre del día
data_for_prediction$DIA_NOMBRE <- weekdays(data_for_prediction$FECHA)
data_for_prediction$DIA_NOMBRE <- toupper(stri_trans_general(data_for_prediction$DIA_NOMBRE,"Latin-ASCII"))
## fechas especiales
data_for_prediction$FECHAS_ESP1 <- ifelse(data_for_prediction$DIA_NOMBRE %in% c("SABADO","DOMINGO"), "NO LABORAL", "LABORAL")
data_for_prediction$FECHAS_ESP <- ifelse(data_for_prediction$FECHA %in% festivos$FECHA, "FESTIVO", data_for_prediction$FECHAS_ESP1)
## dia, semana, mes, periodo
data_for_prediction$DIA_ANNO <- yday(data_for_prediction$FECHA)
data_for_prediction$SEMANA <- week(data_for_prediction$FECHA)
data_for_prediction$MES <- month(data_for_prediction$FECHA)
data_for_prediction$PERIODO <- year(data_for_prediction$FECHA)
## variables a factores
data_for_prediction$MES <- as.factor(data_for_prediction$MES)
## niveles
levels(data_for_prediction$FECHAS_ESP) <- levels(accidentalidad$FECHAS_ESP)
levels(data_for_prediction$CLASE) <- levels(accidentalidad$CLASE)
levels(data_for_prediction$COMUNA) <- levels(accidentalidad$COMUNA)
levels(data_for_prediction$MES) <- levels(accidentalidad$MES)
## SEMANA a numéricas
data_for_prediction$SEMANA <- as.numeric(data_for_prediction$SEMANA)
## nombre de las clases
data_for_prediction$CLASE_TEXT <- ifelse(data_for_prediction$CLASE==1, "ATROPELLO",
ifelse(data_for_prediction$CLASE==2, "CAIDA OCUPANTE",
ifelse(data_for_prediction$CLASE==3, "CHOQUE",
ifelse(data_for_prediction$CLASE==4, "OTRO",
"VOLCAMIENTO"))))
## data final
data_for_prediction <- select(data_for_prediction, FECHA, PERIODO, MES, FECHAS_ESP, CLASE_TEXT,
SEMANA, DIA_ANNO, COMUNA, BARRIO, CLASE)
data_for_prediction
}
data_in <- acc_function("2018/1/1", "2018/12/31", "mes")
## prediction 1
predicciones <- pred_function(data_in, "mes")
predicciones
data_in <- acc_function("2018/1/1", "2018/1/31", "mes")
## prediction 1
predicciones <- pred_function(data_in, "mes")
predicciones
data_in <- acc_function("2018/1/1", "2018/1/31", "mes")
## prediction 1
predicciones <- pred_function(data_in, "mes")
predicciones
save.image("~/Especializacion en Analitica/5. Analítica predictiva/trabajo_final/Limpieza_Datos/2.0/.RData")
load("~/Especializacion en Analitica/5. Analítica predictiva/trabajo_final/Limpieza_Datos/2.0/.RData")
a <- c("aa", "bb")
b <- ("ee", "ff")
b <- c("ee", "ff")
paste(a,b)
paste0(a,b)
paste0(a,b, sep="\n")
w$a <-9
seq(0.01, 0.9, length=100)
mom <- seq(0.01, 0.9, length=100)
sample(mom, 3)
mom <- seq(0.01, 0.9, length=10)
sample(mom, 3)
library(gtools)
install.packages("gtools")
library(gtools)
help(library="gtools")
help("package.contents"="gtools")
help(package="gtools")
combinations(3,2,letters[1:3])
permutations(3,2,letters[1:3])
permutations(3,3,letters[1:3])
letters[1:3]
letters[1:6]
permutations(6,6,letters[1:6])
combinations(6,6,letters[1:6])
combinations(6,2,letters[1:6])
permutations(4,4,letters[1:4])
library(Metrics)
gas <- c(457.99, 441.33,433.62,448.87,453.19,444.21,447.15,449.97,445.38)
rmse(gas)
n = length(gas)
gas2 = gas^2
gas2
gas_sum = sum(gas2)
sqrt(gas_sum/n)
cali = c(23.124,25.269,23.306,30.117,28.38,23.502,24.901)
sd_c = sd(cali)
sd_c
x_c = mean(cali)
x_c
cv = (sd_c/x_c)*100
cv
jugo = c(2.5733,2.6533,2.7519,2.8001,2.8098,2.6096,2.663,2.4659,2.6405)
var(jugo)
frutas = c(65.3,71.9,68.5,72.5,68.7,71.8,67.5,66.2,67.5)
n = length(frutas)
sd_f = sd(frutas)
frutas = c(65.3,71.9,68.5,72.5,68.7,71.8,67.5,66.2,67.5)
n = length(frutas)
sd_f = sd(frutas)
mean_fr = mean(frutas)
## suma
suma_fr = 0
for (i in 1:n) {
suma_fr = suma_fr + (frutas[i]-mean_fr)^4
}
suma_fr
k = ((n*(n-1))/(n-1)*(n-2)*(n-3))*(suma_fr/(sd_f^4))-((3*(n-1)^2)/(n-2)*(n-3))
k
n
library(moments)
install.packages("moments")
kurtosis(frutas)
help(package="moments")
kurtosis(frutas)
library(moments)
kurtosis(frutas)
kurtosis(frutas)
skewness(frutas)
suma_fr/sd_f^4
((n*(n-1))/(n-1)*(n-2)*(n-3))
k = ((n*(n-1))/((n-1)*(n-2)*(n-3)))*(suma_fr/(sd_f^4))-((3*(n-1)^2)/((n-2)*(n-3)))
k
k = ((n*(n-1))/((n-1)*(n-2)*(n-3)))*(suma_fr/(sd_f^4))-((3*((n-1)^2))/((n-2)*(n-3)))
k
frutas2 = c(70.2,77.6,74.5,75.2,75.4,75.7,81.3,78.4,73.2)
nf2 = length(frutas2)
sd2 = sd(frutas2)
suma_fr2 = 0
for (i in 1:n) {
suma_fr2 = suma_fr2 + (frutas2[i]-mean_fr)^3
}
suma_fr2
a = (nf2/((nf2-1)*(nf2-2)))*(suma_fr2/(sd2^3))
a
skewness(frutas2)
frutas2 = c(70.2,77.6,74.5,75.2,75.4,75.7,81.3,78.4,73.2)
nf2 = length(frutas2)
sd2 = sd(frutas2)
mean_fr=mean(frutas2)
suma_fr2 = 0
for (i in 1:n) {
suma_fr2 = suma_fr2 + (frutas2[i]-mean_fr)^3
}
suma_fr2
a = (nf2/((nf2-1)*(nf2-2)))*(suma_fr2/(sd2^3))
a
l_inf = c(220,230,240,250,260,270,280)
l_sup=c(230,240,250,260,270,280,290)
fr_abs = c(1,11,20,32,22,2,1)
hi = c(0.0112,0.1236,0.2247,0.3596,0.2472,0.0225,0.0112)
Fi = c(1,12,32,64,86,88,89)
Hi = c(0.0112,0.1348,0.3596,0.7191,0.9663,0.9888,1)
cbind(l_inf,l_sup,fr_abs,hi,Fi,Hi)
pi = 270+((((83*7)/100)-86)/2)*10
pi
a = 83*7/100
b = 86
ni = 2
ai = 10
270 + ((a-b)/ni)*ai
83*7/100
(83*7)/100
a = 83*290/100
b = 86
ni = 2
ai = 10
270 + ((a-b)/ni)*ai
a = 83*7/100
b = 86
ni = 22
ai = 10
260 + ((a-b)/ni)*ai
a = 83*7/100
b = 64
ni = 22
ai = 10
260 + ((a-b)/ni)*ai
a = 83*7/100
b = 64
ni = 22
ai = 70
260 + ((a-b)/ni)*ai
a = 83*7/100
b = 64
ni = 22
ai = 10
260 + ((a-b)/ni)*ai
(4/7)*(3/6)*(3/5)*(2/4)*(2/3)*(1/2)
dbinom(8,15,0.2)
help(dbinom)
1-pbinom(7,15,0.2)
pbinom(7,15,0.2)-pbinom(3.15.0.2)
pbinom(7,15,0.2)-pbinom(3,15,0.2)
dhyper(2,5,20,10)
phyper(2,5,20,10)
dpois(6,4)
dpois(2,12)
1-dpois(2,12)
1-ppois(1,12)
1-pbinom(10,20,0.3)
1-pbinom(9,20,0.3)
pbinom(4,20,0.3)
pninom(4,10,0.7)
pbinom(4,10,0.7)
pbinom(9,20,0.7)
pbinom(6,15,0.25)-pbinom(2,15,0.25)
pbinom(3,15,0.25)
10-pbinom(5,15,0.25)
1-pbinom(5,15,0.25)
(4/9)+dbinom(1,1,0.3)
help(dnbinom)
dnbinom(10,5,0.25)
dnbinom(10,5,0.3)
dnbinom(5,5,0.3)
help(pnorm)
1-exp(-1)
1-0.632
help(qnorm)
qnorm(0.05,3.3,0.2)
ln(0.5)
log(0.5)
0.69*10/(1/20)
1-(2/3)^2
1-(0.6667)^2
0.6667^3
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, comment = "")
high_resid <- medical_cost[which(abs(medical_cost$Stand.resid)>2),]
setwd("~/Especializacion en Analitica/Data-Analysis/4. Medical Cost Personal")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, comment = "")
library(dplyr)
library(ggplot2)
library(plotly)
library(kableExtra)
library(gridExtra)
## loading data
medical_cost <- read.csv("insurance.csv", header=TRUE, sep=',', encoding="UTF-8")
## Information
str(medical_cost)
## function to count missing values
Na_Count <- function(feature) {
sum(is.na(feature))
}
## applying to the data
apply(medical_cost, 2, Na_Count)
## to factor
medical_cost$sex <- as.factor(medical_cost$sex)
medical_cost$children <- as.factor(medical_cost$children)
medical_cost$smoker <- as.factor(medical_cost$smoker)
medical_cost$region <- as.factor(medical_cost$region)
##
head(medical_cost)
## summary
summary(medical_cost)
library(reshape)
cormat <- cor(medical_cost[c("age","bmi", "charges")])
## melting
melted_data <- melt(cormat)
head(melted_data)
## plot
g <- ggplot(data = melted_data, aes(x=X1, y=X2, fill=value)) + geom_tile()
g <- g + labs(x="", y="") + labs(title="Correlation heatmap")
g <- g + geom_text(aes(X1,X2, label=round(value,2)), color="white", size=4)
g
## adding the discretization
medical_age <- medical_cost
medical_age$aboveMean<- ifelse(medical_age$age > mean(medical_age$age), "above", "below")
medical_age$aboveMean <- as.factor(medical_age$aboveMean)
## plot
ghist <- ggplot(medical_age, aes(x=charges))+geom_histogram(aes(color=aboveMean, fill=aboveMean))
ghist <- ghist + facet_grid(aboveMean~.) + labs(y="", title="Charges Distribution")
ghist
## scatter
gscat <- ggplot(medical_cost, aes(age, charges, color=sex)) + geom_point()
gscat <- gscat + labs(title = "Age vs Charges plot")
gscat <- gscat + geom_smooth()
gscat
## scatter
gscat <- ggplot(medical_cost, aes(age, charges)) + geom_point()
gscat <- gscat + labs(title = "Age vs Charges plot")
gscat <- gscat + geom_smooth() + facet_grid(.~region)
gscat
## scatter
gscat2 <- ggplot(medical_cost, aes(bmi, charges, color=sex)) + geom_point()
gscat2 <- gscat2 + labs(x="BMI", y="Charges", title="BMI vs Charges")
gscat2
## bmi
medical_age$bmiAbvMean <- ifelse(medical_age$bmi>mean(medical_age$bmi), "Above", "Below")
medical_age$bmiAbvMean <- as.factor(medical_age$bmiAbvMean)
## plot
ghist <- ggplot(medical_age, aes(x=charges)) + geom_histogram(aes(color=bmiAbvMean, fill=bmiAbvMean))
ghist <- ghist + facet_grid(bmiAbvMean~.) + labs(title="Charges distribution by BMI", y="")
ghist
## smoke
gscat3 <- ggplot(medical_cost, aes(bmi, charges, color=smoker)) + geom_point()
gscat3 <- gscat3 + labs(x="BMI", y="Charges", title="BMI vs Charges")
gscat3
## children
gbar <- ggplot(medical_cost, aes(x=children, y=charges)) + stat_summary(fun.y = "mean", geom = "bar", color="lightblue", fill="lightblue")
gbar <- gbar + labs(title="Average Charges by # of Children")
gbar
gbox <- ggplot(medical_cost, aes(x=children, y=charges)) + geom_boxplot(aes(fill=children))
gbox <- gbox + labs(title="Charges by # of children")
gbox
#charges by sex
gvio <- ggplot(medical_cost, aes(x=charges, y=sex)) + geom_violin(aes(fill=sex))
gvio
## linear model
model_1 <- lm(charges~., data=medical_cost)
summary(model_1)
## linear model 2
model_2 <- lm(charges~.-1, data=medical_cost)
summary(model_2)
## plots
par(mfrow=c(1,2))
plot(model_2,1)
plot(model_2,2)
## plots
par(mfrow=c(1,2))
plot(model_2,3)
plot(model_2,4)
## plots
par(mfrow=c(1,2))
plot(model_2,5)
plot(model_2,6)
## new variables
medical_cost$Leverage <- hatvalues(model_2)
medical_cost$Stand.resid <- rstandard(model_2)
medical_cost$Cooks.dist <- cooks.distance(model_2)
head(medical_cost)
high_resid <- medical_cost[which(abs(medical_cost$Stand.resid)>2),]
head(high_resid)
num_coef = length(model_2$coefficients)
num_row = length(model_2$residuals)
high_leverage <- medical_cost[which(medical_cost$Leverage>(2*num_coef/num_row)), ]
head(high_leverage)
medical_cost[which(medical_cost$Cooks.dist>0.5),]
influentials <- union(which(medical_cost$Leverage>(2*num_coef/num_row)), which(abs(medical_cost$Stand.resid)>2))
influentials <- sort(influentials)
## dataset
influential_points <- medical_cost[influentials, ]
head(influential_points)
